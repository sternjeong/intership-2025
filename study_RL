import gym
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import random
import numpy as np
import matplotlib.pyplot as plt
from collections import deque

# 설정값들
ENV_NAME = "CartPole-v1"
GAMMA = 0.99
LR = 1e-3
BATCH_SIZE = 64
BUFFER_SIZE = 10000
EPSILON_START = 1.0
EPSILON_END = 0.01
EPSILON_DECAY = 0.995
TARGET_UPDATE = 10
EPISODES = 500

# Q-Network 정의
class DQN(nn.Module):
    def __init__(self, state_dim, action_dim):
        super(DQN, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(state_dim, 128),
            nn.ReLU(),
            nn.Linear(128, action_dim)
        )

    def forward(self, x):
        return self.net(x)

# 경험 리플레이 버퍼
class ReplayBuffer:
    def __init__(self, capacity):
        self.buffer = deque(maxlen=capacity)

    def push(self, transition):
        self.buffer.append(transition)

    def sample(self, batch_size):
        samples = random.sample(self.buffer, batch_size)
        states, actions, rewards, next_states, dones = zip(*samples)
        return (torch.FloatTensor(states),
                torch.LongTensor(actions).unsqueeze(1),
                torch.FloatTensor(rewards).unsqueeze(1),
                torch.FloatTensor(next_states),
                torch.FloatTensor(dones).unsqueeze(1))

    def __len__(self):
        return len(self.buffer)

# Epsilon-greedy 정책
def select_action(model, state, epsilon, action_space):
    if random.random() < epsilon:
        return action_space.sample()
    else:
        state = torch.FloatTensor(state).unsqueeze(0)
        return model(state).argmax().item()

# 학습 루프
def train():
    env = gym.make(ENV_NAME)
    state_dim = env.observation_space.shape[0]
    action_dim = env.action_space.n

    q_net = DQN(state_dim, action_dim)
    target_q_net = DQN(state_dim, action_dim)
    target_q_net.load_state_dict(q_net.state_dict())

    optimizer = optim.Adam(q_net.parameters(), lr=LR)
    buffer = ReplayBuffer(BUFFER_SIZE)
    epsilon = EPSILON_START

    episode_rewards = []

    for episode in range(EPISODES):
        state = env.reset()
        total_reward = 0
        done = False

        while not done:
            action = select_action(q_net, state, epsilon, env.action_space)
            next_state, reward, done, _ = env.step(action)
            buffer.push((state, action, reward, next_state, float(done)))
            state = next_state
            total_reward += reward

            if len(buffer) >= BATCH_SIZE:
                states, actions, rewards, next_states, dones = buffer.sample(BATCH_SIZE)
                q_values = q_net(states).gather(1, actions)
                next_q_values = target_q_net(next_states).max(1)[0].detach().unsqueeze(1)
                targets = rewards + GAMMA * next_q_values * (1 - dones)
                loss = F.mse_loss(q_values, targets)

                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

        if episode % TARGET_UPDATE == 0:
            target_q_net.load_state_dict(q_net.state_dict())

        epsilon = max(EPSILON_END, epsilon * EPSILON_DECAY)
        episode_rewards.append(total_reward)
        print(f"Episode {episode}: Total Reward = {total_reward:.2f}, Epsilon = {epsilon:.3f}")

    env.close()
    return episode_rewards, q_net

# 실행
if __name__ == "__main__":
    rewards, q_net = train()


